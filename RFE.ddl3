DROP SEQUENCE F15F2_Auth_seq ;
create sequence F15F2_Auth_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Auth_PK_trig
before insert on F15F2_Auth
for each row
begin
select F15F2_Auth_seq.nextval into :new.auth_id from dual;
end;
/
alter table F15F2_Auth add created date ;
alter table F15F2_Auth add created_by VARCHAR2 (255) ;
alter table F15F2_Auth add row_version_number integer ;
alter table F15F2_Auth add updated date ;
alter table F15F2_Auth add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Auth_AUD_trig
before insert or update on F15F2_Auth
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Comments_seq ;
create sequence F15F2_Comments_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Comments_PK_trig
before insert on F15F2_Comments
for each row
begin
select F15F2_Comments_seq.nextval into :new.comment_id from dual;
end;
/
alter table F15F2_Comments add created date ;
alter table F15F2_Comments add created_by VARCHAR2 (255) ;
alter table F15F2_Comments add row_version_number integer ;
alter table F15F2_Comments add updated date ;
alter table F15F2_Comments add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Comments_AUD_trig
before insert or update on F15F2_Comments
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Contacts_seq ;
create sequence F15F2_Contacts_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Contacts_PK_trig
before insert on F15F2_Contacts
for each row
begin
select F15F2_Contacts_seq.nextval into :new.contact_id from dual;
end;
/
alter table F15F2_Contacts add created date ;
alter table F15F2_Contacts add created_by VARCHAR2 (255) ;
alter table F15F2_Contacts add row_version_number integer ;
alter table F15F2_Contacts add updated date ;
alter table F15F2_Contacts add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Contacts_AUD_trig
before insert or update on F15F2_Contacts
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Doc_seq ;
create sequence F15F2_Doc_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Doc_PK_trig
before insert on F15F2_Doc
for each row
begin
select F15F2_Doc_seq.nextval into :new.doc_id from dual;
end;
/
alter table F15F2_Doc add created date ;
alter table F15F2_Doc add created_by VARCHAR2 (255) ;
alter table F15F2_Doc add row_version_number integer ;
alter table F15F2_Doc add updated date ;
alter table F15F2_Doc add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Doc_AUD_trig
before insert or update on F15F2_Doc
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Emp_seq ;
create sequence F15F2_Emp_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Emp_PK_trig
before insert on F15F2_Emp
for each row
begin
select F15F2_Emp_seq.nextval into :new.emp_id from dual;
end;
/
alter table F15F2_Emp add created date ;
alter table F15F2_Emp add created_by VARCHAR2 (255) ;
alter table F15F2_Emp add row_version_number integer ;
alter table F15F2_Emp add updated date ;
alter table F15F2_Emp add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Emp_AUD_trig
before insert or update on F15F2_Emp
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Hist_seq ;
create sequence F15F2_Hist_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Hist_PK_trig
before insert on F15F2_Hist
for each row
begin
select F15F2_Hist_seq.nextval into :new.hist_id from dual;
end;
/
alter table F15F2_Hist add created date ;
alter table F15F2_Hist add created_by VARCHAR2 (255) ;
alter table F15F2_Hist add row_version_number integer ;
alter table F15F2_Hist add updated date ;
alter table F15F2_Hist add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Hist_AUD_trig
before insert or update on F15F2_Hist
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Lab_seq ;
create sequence F15F2_Lab_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Lab_PK_trig
before insert on F15F2_Lab
for each row
begin
select F15F2_Lab_seq.nextval into :new.lab_id from dual;
end;
/
alter table F15F2_Lab add created date ;
alter table F15F2_Lab add created_by VARCHAR2 (255) ;
alter table F15F2_Lab add row_version_number integer ;
alter table F15F2_Lab add updated date ;
alter table F15F2_Lab add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Lab_AUD_trig
before insert or update on F15F2_Lab
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_RFE_seq ;
create sequence F15F2_RFE_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_RFE_PK_trig
before insert on F15F2_RFE
for each row
begin
select F15F2_RFE_seq.nextval into :new.rfe_id from dual;
end;
/
alter table F15F2_RFE add created date ;
alter table F15F2_RFE add created_by VARCHAR2 (255) ;
alter table F15F2_RFE add row_version_number integer ;
alter table F15F2_RFE add updated date ;
alter table F15F2_RFE add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_RFE_AUD_trig
before insert or update on F15F2_RFE
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_RFE_Tasks_seq ;
create sequence F15F2_RFE_Tasks_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_RFE_Tasks_PK_trig
before insert on F15F2_RFE_Tasks
for each row
begin
select F15F2_RFE_Tasks_seq.nextval into :new.rfe_tasks_id from dual;
end;
/
alter table F15F2_RFE_Tasks add created date ;
alter table F15F2_RFE_Tasks add created_by VARCHAR2 (255) ;
alter table F15F2_RFE_Tasks add row_version_number integer ;
alter table F15F2_RFE_Tasks add updated date ;
alter table F15F2_RFE_Tasks add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_RFE_Tasks_AUD_trig
before insert or update on F15F2_RFE_Tasks
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Approver_seq ;
create sequence F15F2_Approver_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Approver_PK_trig
before insert on F15F2_Approver
for each row
begin
select F15F2_Approver_seq.nextval into :new.approver_id from dual;
end;
/
alter table F15F2_Approver add created date ;
alter table F15F2_Approver add created_by VARCHAR2 (255) ;
alter table F15F2_Approver add row_version_number integer ;
alter table F15F2_Approver add updated date ;
alter table F15F2_Approver add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Approver_AUD_trig
before insert or update on F15F2_Approver 
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Status_seq ;
create sequence F15F2_Status_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Status_PK_trig
before insert on F15F2_Status
for each row
begin
select F15F2_Status_seq.nextval into :new.status_id from dual;
end;
/
alter table F15F2_Status add created date ;
alter table F15F2_Status add created_by VARCHAR2 (255) ;
alter table F15F2_Status add row_version_number integer ;
alter table F15F2_Status add updated date ;
alter table F15F2_Status add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Status_AUD_trig
before insert or update on F15F2_Status
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP SEQUENCE F15F2_Task_seq ;
create sequence F15F2_Task_seq
start with 100
increment by 1
nomaxvalue
;

create or replace trigger F15F2_Task_PK_trig
before insert on F15F2_Task
for each row
begin
select F15F2_Task_seq.nextval into :new.task_id from dual;
end;
/
alter table F15F2_Task add created date ;
alter table F15F2_Task add created_by VARCHAR2 (255) ;
alter table F15F2_Task add row_version_number integer ;
alter table F15F2_Task add updated date ;
alter table F15F2_Task add updated_by VARCHAR2 (255) ;
/
create or replace trigger F15F2_Task_AUD_trig
before insert or update on F15F2_Task
for each row
begin
  if inserting then
    :new.created := localtimestamp;
    :new.created_by := nvl(wwv_flow.g_user,user);
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
    :new.row_version_number := 1;
  elsif updating then
    :new.row_version_number := nvl(:old.row_version_number,1) + 1;
  end if;
  if inserting or updating then
    :new.updated := localtimestamp;
    :new.updated_by := nvl(wwv_flow.g_user,user);
  end if;
end;
/

DROP INDEX F15F2_Emp_emp_id_FK_0 ;
CREATE INDEX F15F2_Emp_emp_id_FK_0 ON F15F2_Auth(F15F2_Emp_emp_id) ;
DROP INDEX F15F2_Emp_emp_id_FK_1 ;
CREATE INDEX F15F2_Emp_emp_id_FK_1 ON F15F2_Comments(F15F2_Emp_emp_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_2 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_2 ON F15F2_Comments(F15F2_RFE_rfe_id) ;
DROP INDEX F15F2_Emp_emp_id_FK_3 ;
CREATE INDEX F15F2_Emp_emp_id_FK_3 ON F15F2_Contacts(F15F2_Emp_emp_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_4 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_4 ON F15F2_Contacts(F15F2_RFE_rfe_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_5 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_5 ON F15F2_Doc(F15F2_RFE_rfe_id) ;
DROP INDEX F15F2_Lab_lab_id_FK_6 ;
CREATE INDEX F15F2_Lab_lab_id_FK_6 ON F15F2_Emp(F15F2_Lab_lab_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_7 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_7 ON F15F2_Hist(F15F2_RFE_rfe_id) ;
DROP INDEX F15F2_Emp_emp_id_FK_8 ;
CREATE INDEX F15F2_Emp_emp_id_FK_8 ON F15F2_RFE(F15F2_Emp_emp_id) ;
DROP INDEX F15F2_Status_status_id_FK_9 ;
CREATE INDEX F15F2_Status_status_id_FK_9 ON F15F2_RFE(F15F2_Status_status_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_10 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_10 ON F15F2_RFE_Tasks(F15F2_RFE_rfe_id) ;
DROP INDEX F15F2_Task_task_id_FK_11 ;
CREATE INDEX F15F2_Task_task_id_FK_11 ON F15F2_RFE_Tasks(F15F2_Task_task_id) ;
DROP INDEX F15F2_Emp_emp_id_FK_12 ;
CREATE INDEX F15F2_Emp_emp_id_FK_12 ON F15F2_Approver(F15F2_Emp_emp_id) ;
DROP INDEX F15F2_RFE_rfe_id_FK_13 ;
CREATE INDEX F15F2_RFE_rfe_id_FK_13 ON F15F2_Approver(F15F2_RFE_rfe_id) ;
